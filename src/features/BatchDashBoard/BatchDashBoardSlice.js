import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {fetchBatches } from './BatchDashBoardAPI';

const initialState = {
  batches: [],
  filteredBatches: [],
  status: "idle",
  showSlideOver: false,
  slideOverData: {
    id: 1,
    status: "Queued",
    createdAt: "2022-01-03T00:00:00.000Z",
    createdBy: "jane.doe@example.com",
    labels: ["calibration"],
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchBatchesAsync = createAsyncThunk(
  'batchDashBoard/fetchBatches',
  async (batches) => {
    const response = await fetchBatches(batches);
    return response.data;
  }
);

export const batchDashBoardSlice = createSlice({
  name: 'batchDashBoard',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    filterBatches: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      if (action.payload === undefined) {
        state.filteredBatches = state.batches;
        return;
      }
      state.filteredBatches = state.batches?.filter(
        (batch) => batch.status.toLowerCase() === action.payload.toLowerCase()
      );
    },
    setShowSlideOver: (state, action) => {
      
      state.showSlideOver = !state.showSlideOver;
      state.slideOverData = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchBatchesAsync.pending, (state, action) => { 
        state.status = 'loading';
      })
      .addCase(fetchBatchesAsync.fulfilled, (state, action) => { 
        state.status = "idle";
        state.batches = action.payload;
        state.filteredBatches = action.payload;
      });
  },
});

export const { filterBatches, setShowSlideOver} = batchDashBoardSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.batchDashBoard.value)`
export const selectCount = (state) => state.batchDashBoard.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default batchDashBoardSlice.reducer;
